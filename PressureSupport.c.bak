/*! \file **********************************************************************
 *
 *  \brief 
 *
 
 *  \author 
 *
 *  Copyright (c) 2021 CT Control Technology .
 ******************************************************************************/
/*
PSV is derived from Pressure control mode of ventilation.
Both inspiration and expiration is triggered by patient only,so there is no I:E ratio and RR.
The exhalation is triggered by flow cycling- which is, when flow reaches to certain 
fixed percentage of peak flow then exhalation trigger will ooccur.
PSV identification is 0x03.
Normal Pressure control and PEEP control algorithms are using here.
*/

//---[ Includes ]---------------------------------------------------------------

#include "PressureSupport.h"



//---[ Macros ]-----------------------------------------------------------------

//---[ Constants ]--------------------------------------------------------------


//---[ Types ]------------------------------------------------------------------


//---[ Private Functions ]------------------------------------------------------


//---[ Public Variables ]-------------------------------------------------------

//---[ Private Function Definitions ]-------------------------------------------

//uint8_t RISE_FLAG=0;
//float pressure_max_flow=0;
//float check_pressure=25,diff_pressure=0;
void pressuresupport(void)
{
	
			if(!ulInhalationFlag && !ulExhalationFlag)
			{
				
//			 ctrlReadParam.Insp_Pressure = ctrlWriteRead.Set_Pmax;
				ventAlgParam.PressureTrigger = 0;
				ventAlgParam.PatientTriggerWindow = 0;
				ventAlgParam.FlowTrigger = 0;
				ctrlServParam.Time_Stamp = 0;
				
				ulRiseTimeCounter = 0;
				ulRiseTimeFlag = 0;
				ulInhalationFlag = 1;
				Volume_read=0;
				Max_E_Tidal_vol=0;
				
				
/* changes  added for PCM mode checking*/
				
				if(BREATH_CNT != 0)
				{
					check_pressure[1]=ctrlWriteRead.Set_pressuresupport+ctrlWriteRead.Set_PEEP;
					pressure_autocorr();			      //fuction for PID AUTO CHANGE
				}
				else
					{	P_K=0.1,Ti=0.035,Ts=0.02,Td=0;
						ps_INSP_Pressure=10;
					} //first breath to find the resistance
					
//				P_compliance=compliance;
				P_Resistance=Resistance;
				Tid_Vol=0,flow=0,p_flow=0,compliance=0;
				Peep_Flag = 0;
				fl_tri_flag=0;
				PEF=0;
				Insp_Tidal_vol=0;//making inspiratory tidal volume zero in every starting of new breath
				peep_delay=0;
				pre_point=0;
				RISE_FLAG=0;
				pressure_flow=20000;
				P_pre_rise=pre_rise;
				pre_rise_f=0;			
				pre_rise=0;				
				P_Error=0,P_Error_2=0,P_IntegralTerm=0,P_DeriveTerm=0,P_PropTerm=0,Flow_out_1=0,Flow_out=0;
				P_Error_1=ctrlWriteRead.Set_pressuresupport;
				pressure_max_flow=0;
				ventAlgParam.Peakflow=0;
				c_k=0;
				ventAlgParam.Ppeak=0;
				BREATH_CNT++;
				rise_error_f=0;
/* changes  added for PCM mode checking*/				
			DAC_Output_Set(&DAC2,DAC_CHANNEL_1,22000,LTC2607_WR_AND_UPDATE);   // Exhal Valve	
			Exh_DACVal=22000;

			}
			if(ulInhalationFlag == 1)
			{
				//added by tomin for pcm control 220122
				if(ctrlReadParam.Insp_Pressure>=check_pressure[1]*0.9 && pre_rise_f ==0)
				{
					pre_rise=ulInhalationCounter;
				  pre_rise_f=1;
				}
			 if(ventAlgParam.Ppeak < ctrlReadParam.Insp_Pressure)
						ventAlgParam.Ppeak = ctrlReadParam.Insp_Pressure;
			 if(ventAlgParam.Peakflow <= ctrlServParam.Inh_Flow) //Finding Peak Flow
					ventAlgParam.Peakflow = ctrlServParam.Inh_Flow;
		
//				if(ulInhalationCounter >= ventAlgorithmSettings.ulInhalationTime)
				if(ctrlServParam.Inh_Flow <= ventAlgParam.Peakflow*ctrlWriteRead.Flow_Exp_trigger/100 && ulInhalationCounter  > 300)
				{
					ulInhalationFlag = 0;
					ulInhalationCounter = 0;					
					ventAlgParam.ulPVValueAir=0;
					DAC_Output_Set(&DAC1,DAC_CHANNEL_1,0,LTC2607_WR_AND_UPDATE); // AIR PV SET Function
					DAC_Output_Set(&DAC1,DAC_CHANNEL_2,0,LTC2607_WR_AND_UPDATE); // O2 PV SET Function		
					ventAlgParam.ulPVValueO2=0;
					ventAlgParam.ulPVValueAir=0;					
					ulExhalationFlag = 1;
					RC_Init = 1;
		
					
/*breath to breath auto correction */     // 03/05/22 tomin
//					if(ctrlWriteRead.Set_pressuresupport != delta_pressure[1])
//					{
//						ps_INSP_Pressure	= ctrlWriteRead.Set_pressuresupport+ctrlWriteRead.Set_PEEP-0.15*(ctrlWriteRead.Set_Insp_Pressure+ctrlWriteRead.Set_PEEP);
//						delta_pressure[1]=ctrlWriteRead.Set_pressuresupport;
//						ventAlgParam.Ppeak=ps_INSP_Pressure;
//						BREATH_CNT=2;
//		  		}
//				 else if(ventAlgParam.Ppeak > (check_pressure[1] + check_pressure[1]*0.05) || 
//						ventAlgParam.Ppeak < (check_pressure[1]-check_pressure[1]*0.05))
//					{
//						diff_pressure[1]=check_pressure[1]-ventAlgParam.Ppeak;
////						diff_pressure[0]=fabs(diff_pressure[0]);
////						if(diff_pressure[0] > check_pressure[0]*0.01 && diff_pressure[0] < check_pressure[0]*0.05)
//					   ps_INSP_Pressure += 1*diff_pressure[1]/2;
//					}
/*breath to breath auto correction */				
				}	
				if(ctrlReadParam.Insp_Pressure >= ctrlWriteRead.Set_Pmax)
				{

				}			
			Exh_DACVal=22000;				
			}

			if(ulExhalationFlag == 1)
			{

				if(BREATH_CNT == 1)
				{
						resis_calculation();
						P_compliance=compliance;
				}
				if(PEF < ctrlServParam.Exh_Flow )  //peak expiratory flow for Resistance calculation.
					PEF=ctrlServParam.Exh_Flow;

				
//				if(ulExhalationCounter >=ventAlgorithmSettings.ulExhalationTime)
//				{
//					ulPeepFlag = 0;
//					ulExhalationFlag = 0;
//					ulExhalationCounter = 0;
//					RC_Init=0;
//				  RC_ConstCount=0;	
//				}
			}
}