<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\KEEN_Vent_Dev.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\KEEN_Vent_Dev.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Nov 28 20:31:47 2022
<BR><P>
<H3>Maximum Stack Usage =        696 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Modbus_Communication &rArr; Modbus_WriteSingleReg &rArr; unpack_IEEE754 &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[91]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">DebugMon_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">GPIOA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">GPIOA_Handler</a><BR>
 <LI><a href="#[d]">GPIOB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">GPIOB_Handler</a><BR>
 <LI><a href="#[e]">GPIOC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">GPIOC_Handler</a><BR>
 <LI><a href="#[f]">GPIOD_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">GPIOD_Handler</a><BR>
 <LI><a href="#[10]">GPIOE_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">GPIOE_Handler</a><BR>
 <LI><a href="#[13]">SSI0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SSI0_Handler</a><BR>
 <LI><a href="#[14]">I2C0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">I2C0_Handler</a><BR>
 <LI><a href="#[15]">PMW0_FAULT_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">PMW0_FAULT_Handler</a><BR>
 <LI><a href="#[16]">PWM0_0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">PWM0_0_Handler</a><BR>
 <LI><a href="#[17]">PWM0_1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">PWM0_1_Handler</a><BR>
 <LI><a href="#[18]">PWM0_2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">PWM0_2_Handler</a><BR>
 <LI><a href="#[19]">QEI0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">QEI0_Handler</a><BR>
 <LI><a href="#[1a]">ADC0SS0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">ADC0SS0_Handler</a><BR>
 <LI><a href="#[1b]">ADC0SS1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ADC0SS1_Handler</a><BR>
 <LI><a href="#[1c]">ADC0SS2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC0SS2_Handler</a><BR>
 <LI><a href="#[1d]">ADC0SS3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC0SS3_Handler</a><BR>
 <LI><a href="#[1e]">WDT0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">WDT0_Handler</a><BR>
 <LI><a href="#[1f]">TIMER0A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">TIMER0A_Handler</a><BR>
 <LI><a href="#[20]">TIMER0B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">TIMER0B_Handler</a><BR>
 <LI><a href="#[21]">TIMER1A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">TIMER1A_Handler</a><BR>
 <LI><a href="#[22]">TIMER1B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">TIMER1B_Handler</a><BR>
 <LI><a href="#[23]">TIMER2A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">TIMER2A_Handler</a><BR>
 <LI><a href="#[24]">TIMER2B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">TIMER2B_Handler</a><BR>
 <LI><a href="#[25]">COMP0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">COMP0_Handler</a><BR>
 <LI><a href="#[26]">COMP1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">COMP1_Handler</a><BR>
 <LI><a href="#[27]">COMP2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">COMP2_Handler</a><BR>
 <LI><a href="#[28]">SYSCTL_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">SYSCTL_Handler</a><BR>
 <LI><a href="#[29]">FLASH_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">FLASH_Handler</a><BR>
 <LI><a href="#[2a]">GPIOF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">GPIOF_Handler</a><BR>
 <LI><a href="#[2b]">GPIOG_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">GPIOG_Handler</a><BR>
 <LI><a href="#[2c]">GPIOH_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">GPIOH_Handler</a><BR>
 <LI><a href="#[2f]">TIMER3A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">TIMER3A_Handler</a><BR>
 <LI><a href="#[30]">TIMER3B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">TIMER3B_Handler</a><BR>
 <LI><a href="#[31]">I2C1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">I2C1_Handler</a><BR>
 <LI><a href="#[32]">QEI1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">QEI1_Handler</a><BR>
 <LI><a href="#[33]">CAN0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">CAN0_Handler</a><BR>
 <LI><a href="#[34]">CAN1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">CAN1_Handler</a><BR>
 <LI><a href="#[35]">CAN2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">CAN2_Handler</a><BR>
 <LI><a href="#[36]">HIB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">HIB_Handler</a><BR>
 <LI><a href="#[37]">USB0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">USB0_Handler</a><BR>
 <LI><a href="#[38]">PWM0_3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">PWM0_3_Handler</a><BR>
 <LI><a href="#[39]">UDMA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">UDMA_Handler</a><BR>
 <LI><a href="#[3a]">UDMAERR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">UDMAERR_Handler</a><BR>
 <LI><a href="#[3b]">ADC1SS0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">ADC1SS0_Handler</a><BR>
 <LI><a href="#[3c]">ADC1SS1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">ADC1SS1_Handler</a><BR>
 <LI><a href="#[3d]">ADC1SS2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">ADC1SS2_Handler</a><BR>
 <LI><a href="#[3e]">ADC1SS3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">ADC1SS3_Handler</a><BR>
 <LI><a href="#[3f]">GPIOJ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">GPIOJ_Handler</a><BR>
 <LI><a href="#[40]">GPIOK_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">GPIOK_Handler</a><BR>
 <LI><a href="#[41]">GPIOL_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">GPIOL_Handler</a><BR>
 <LI><a href="#[42]">SSI2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">SSI2_Handler</a><BR>
 <LI><a href="#[43]">SSI3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">SSI3_Handler</a><BR>
 <LI><a href="#[44]">UART3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">UART3_Handler</a><BR>
 <LI><a href="#[45]">UART4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">UART4_Handler</a><BR>
 <LI><a href="#[46]">UART5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">UART5_Handler</a><BR>
 <LI><a href="#[47]">UART6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">UART6_Handler</a><BR>
 <LI><a href="#[48]">UART7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">UART7_Handler</a><BR>
 <LI><a href="#[49]">I2C2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">I2C2_Handler</a><BR>
 <LI><a href="#[4a]">I2C3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">I2C3_Handler</a><BR>
 <LI><a href="#[4b]">TIMER4A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">TIMER4A_Handler</a><BR>
 <LI><a href="#[4c]">TIMER4B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">TIMER4B_Handler</a><BR>
 <LI><a href="#[4d]">TIMER5A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">TIMER5A_Handler</a><BR>
 <LI><a href="#[4e]">TIMER5B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">TIMER5B_Handler</a><BR>
 <LI><a href="#[4f]">WTIMER0A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">WTIMER0A_Handler</a><BR>
 <LI><a href="#[50]">WTIMER0B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">WTIMER0B_Handler</a><BR>
 <LI><a href="#[51]">WTIMER1A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">WTIMER1A_Handler</a><BR>
 <LI><a href="#[52]">WTIMER1B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52]">WTIMER1B_Handler</a><BR>
 <LI><a href="#[53]">WTIMER2A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">WTIMER2A_Handler</a><BR>
 <LI><a href="#[54]">WTIMER2B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">WTIMER2B_Handler</a><BR>
 <LI><a href="#[55]">WTIMER3A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55]">WTIMER3A_Handler</a><BR>
 <LI><a href="#[56]">WTIMER3B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">WTIMER3B_Handler</a><BR>
 <LI><a href="#[57]">WTIMER4A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">WTIMER4A_Handler</a><BR>
 <LI><a href="#[58]">WTIMER4B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58]">WTIMER4B_Handler</a><BR>
 <LI><a href="#[59]">WTIMER5A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">WTIMER5A_Handler</a><BR>
 <LI><a href="#[5a]">WTIMER5B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a]">WTIMER5B_Handler</a><BR>
 <LI><a href="#[5b]">FPU_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b]">FPU_Handler</a><BR>
 <LI><a href="#[5c]">I2C4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c]">I2C4_Handler</a><BR>
 <LI><a href="#[5d]">I2C5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5d]">I2C5_Handler</a><BR>
 <LI><a href="#[5e]">GPIOM_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5e]">GPIOM_Handler</a><BR>
 <LI><a href="#[5f]">GPION_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f]">GPION_Handler</a><BR>
 <LI><a href="#[60]">QEI2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60]">QEI2_Handler</a><BR>
 <LI><a href="#[61]">GPIOP0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">GPIOP0_Handler</a><BR>
 <LI><a href="#[62]">GPIOP1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[62]">GPIOP1_Handler</a><BR>
 <LI><a href="#[63]">GPIOP2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[63]">GPIOP2_Handler</a><BR>
 <LI><a href="#[64]">GPIOP3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64]">GPIOP3_Handler</a><BR>
 <LI><a href="#[65]">GPIOP4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[65]">GPIOP4_Handler</a><BR>
 <LI><a href="#[66]">GPIOP5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66]">GPIOP5_Handler</a><BR>
 <LI><a href="#[67]">GPIOP6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[67]">GPIOP6_Handler</a><BR>
 <LI><a href="#[68]">GPIOP7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68]">GPIOP7_Handler</a><BR>
 <LI><a href="#[69]">GPIOQ0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[69]">GPIOQ0_Handler</a><BR>
 <LI><a href="#[6a]">GPIOQ1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a]">GPIOQ1_Handler</a><BR>
 <LI><a href="#[6b]">GPIOQ2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6b]">GPIOQ2_Handler</a><BR>
 <LI><a href="#[6c]">GPIOQ3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c]">GPIOQ3_Handler</a><BR>
 <LI><a href="#[6d]">GPIOQ4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d]">GPIOQ4_Handler</a><BR>
 <LI><a href="#[6e]">GPIOQ5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">GPIOQ5_Handler</a><BR>
 <LI><a href="#[6f]">GPIOQ6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6f]">GPIOQ6_Handler</a><BR>
 <LI><a href="#[70]">GPIOQ7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70]">GPIOQ7_Handler</a><BR>
 <LI><a href="#[71]">GPIOR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">GPIOR_Handler</a><BR>
 <LI><a href="#[72]">GPIOS_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[72]">GPIOS_Handler</a><BR>
 <LI><a href="#[73]">PMW1_0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">PMW1_0_Handler</a><BR>
 <LI><a href="#[74]">PWM1_1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[74]">PWM1_1_Handler</a><BR>
 <LI><a href="#[75]">PWM1_2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75]">PWM1_2_Handler</a><BR>
 <LI><a href="#[76]">PWM1_3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76]">PWM1_3_Handler</a><BR>
 <LI><a href="#[77]">PWM1_FAULT_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[77]">PWM1_FAULT_Handler</a><BR>
 <LI><a href="#[f9]">UARTConfigSetExpClk</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f9]">UARTConfigSetExpClk</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1a]">ADC0SS0_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1b]">ADC0SS1_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1c]">ADC0SS2_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1d]">ADC0SS3_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3b]">ADC1SS0_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3c]">ADC1SS1_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3d]">ADC1SS2_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3e]">ADC1SS3_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[33]">CAN0_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[34]">CAN1_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[35]">CAN2_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[25]">COMP0_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[26]">COMP1_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[27]">COMP2_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[29]">FLASH_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5b]">FPU_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[c]">GPIOA_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[d]">GPIOB_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[e]">GPIOC_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[f]">GPIOD_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[10]">GPIOE_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2a]">GPIOF_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2b]">GPIOG_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2c]">GPIOH_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3f]">GPIOJ_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[40]">GPIOK_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[41]">GPIOL_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5e]">GPIOM_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5f]">GPION_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[61]">GPIOP0_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[62]">GPIOP1_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[63]">GPIOP2_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[64]">GPIOP3_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[65]">GPIOP4_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[66]">GPIOP5_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[67]">GPIOP6_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[68]">GPIOP7_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[69]">GPIOQ0_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6a]">GPIOQ1_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6b]">GPIOQ2_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6c]">GPIOQ3_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6d]">GPIOQ4_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6e]">GPIOQ5_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6f]">GPIOQ6_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[70]">GPIOQ7_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[71]">GPIOR_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[72]">GPIOS_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[36]">HIB_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[14]">I2C0_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[31]">I2C1_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[49]">I2C2_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4a]">I2C3_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5c]">I2C4_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5d]">I2C5_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[15]">PMW0_FAULT_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[73]">PMW1_0_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[16]">PWM0_0_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[17]">PWM0_1_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[18]">PWM0_2_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[38]">PWM0_3_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[74]">PWM1_1_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[75]">PWM1_2_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[76]">PWM1_3_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[77]">PWM1_FAULT_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[19]">QEI0_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[32]">QEI1_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[60]">QEI2_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[13]">SSI0_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2e]">SSI1_IntHandler</a> from ssi_handler.o(i.SSI1_IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[42]">SSI2_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[43]">SSI3_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[28]">SYSCTL_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from systeminit_handler.o(i.SysTick_Handler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from systeminit_handler.o(i.SysTick_Handler) referenced from systeminit_handler.o(i.SysTick_Timer)
 <LI><a href="#[78]">SystemInit</a> from system_tm4c123.o(i.SystemInit) referenced from startup_rvmdk.o(.text)
 <LI><a href="#[1f]">TIMER0A_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[20]">TIMER0B_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[21]">TIMER1A_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[22]">TIMER1B_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[23]">TIMER2A_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[24]">TIMER2B_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2f]">TIMER3A_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[30]">TIMER3B_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4b]">TIMER4A_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4c]">TIMER4B_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4d]">TIMER5A_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4e]">TIMER5B_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[44]">UART3_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[45]">UART4_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[46]">UART5_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[47]">UART6_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[48]">UART7_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[11]">UARTStdioIntHandler</a> from uartstdio.o(i.UARTStdioIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[12]">UARTStdioIntHandler1</a> from uartstdio1.o(i.UARTStdioIntHandler1) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2d]">UARTStdioIntHandler2</a> from uartstdio2.o(i.UARTStdioIntHandler2) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3a]">UDMAERR_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[39]">UDMA_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[37]">USB0_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1e]">WDT0_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4f]">WTIMER0A_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[50]">WTIMER0B_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[51]">WTIMER1A_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[52]">WTIMER1B_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[53]">WTIMER2A_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[54]">WTIMER2B_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[55]">WTIMER3A_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[56]">WTIMER3B_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[57]">WTIMER4A_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[58]">WTIMER4B_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[59]">WTIMER5A_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5a]">WTIMER5B_Handler</a> from startup_rvmdk.o(.text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[7a]">__main</a> from __main.o(!!!main) referenced from startup_rvmdk.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[7b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[153]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[154]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[155]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[156]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[157]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[83]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[7e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[158]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[159]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[15d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[15f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[160]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[161]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[162]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[163]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[164]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[165]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[166]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[167]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[168]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[169]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[16b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[88]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[16c]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[16d]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[16e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[16f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[170]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[171]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[172]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[173]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[7c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[174]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[80]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[82]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[175]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[84]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Modbus_Communication &rArr; Modbus_WriteSingleReg &rArr; unpack_IEEE754 &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[176]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[92]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[87]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[177]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[89]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[bb]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[178]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[bd]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[179]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[17a]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[17b]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIOA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPIOD_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIOE_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOE_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOE_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>UART0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[13]"></a>SSI0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PMW0_FAULT_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW0_FAULT_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW0_FAULT_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM0_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM0_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWM0_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>QEI0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC0SS0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC0SS1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0SS2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC0SS3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>WDT0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER0A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMER0B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIMER1A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER1B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER2A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER2B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>COMP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>COMP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>COMP2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SYSCTL_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>FLASH_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPIOF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>GPIOG_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOG_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOG_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPIOH_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOH_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOH_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>SSI1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI1_Handler
</UL>

<P><STRONG><a name="[2f]"></a>TIMER3A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIMER3B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>QEI1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>HIB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USB0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PWM0_3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UDMA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UDMAERR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMAERR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMAERR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ADC1SS0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC1SS1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC1SS2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ADC1SS3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>GPIOJ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOJ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOJ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIOK_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOK_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOK_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPIOL_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOL_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOL_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SSI2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SSI3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIMER4A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIMER4B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIMER5A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIMER5B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>WTIMER0A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>WTIMER0B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>WTIMER1A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>WTIMER1B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>WTIMER2A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>WTIMER2B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>WTIMER3A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WTIMER3B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WTIMER4A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>WTIMER4B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>WTIMER5A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>WTIMER5B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPU_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPU_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPIOM_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPION_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPION_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPION_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>QEI2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIOP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIOP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIOP2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIOP3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIOP4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIOP5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIOP6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIOP7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIOQ0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIOQ1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIOQ2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIOQ3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIOQ4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOQ5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIOQ6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIOQ7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIOR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIOS_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOS_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOS_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>PMW1_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW1_0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW1_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>PWM1_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>PWM1_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>PWM1_3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>PWM1_FAULT_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rvmdk.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_FAULT_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_FAULT_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VentAlgorithmSettings
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateStop
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateStandBy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_WriteSingleReg
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Service_MessageCmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_ReadReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_MultipleReg
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Communication
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[8f]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[185]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[188]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[86]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[189]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>ADCIntClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.ADCIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_conversion
</UL>

<P><STRONG><a name="[18b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>ADCIntStatus</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, adc.o(i.ADCIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_conversion
</UL>

<P><STRONG><a name="[12f]"></a>ADCProcessorTrigger</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc.o(i.ADCProcessorTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_conversion
</UL>

<P><STRONG><a name="[131]"></a>ADCSequenceDataGet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_conversion
</UL>

<P><STRONG><a name="[93]"></a>ADC_DataAcq</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, adc_handler.o(i.ADC_DataAcq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADC_DataAcq &rArr; adc_conversion &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_conversion
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateStandBy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateDiagnostic
</UL>

<P><STRONG><a name="[95]"></a>Air_Flow_calc</STRONG> (Thumb, 1106 bytes, Stack size 112 bytes, ventalgorithm_handler.o(i.Air_Flow_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Air_Flow_calc &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_control
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_PressureControl_Loop
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowTrigger
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ventilator_Test
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Safety_Valve_check
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pre_Sensor_check
</UL>

<P><STRONG><a name="[9b]"></a>Aux_Valve_check</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, preusecheck.o(i.Aux_Valve_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Aux_Valve_check
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preusecheck
</UL>

<P><STRONG><a name="[13a]"></a>Battery_check</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, preusecheck.o(i.Battery_check))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preusecheck
</UL>

<P><STRONG><a name="[f7]"></a>DAC_Init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, systeminit_handler.o(i.DAC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[9d]"></a>DAC_Output_Set</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, ltc2607_dac_handler.o(i.DAC_Output_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DAC_Output_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressuresupport
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patient_ckt_chk
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolCtrl_Algorithm
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureCtrl_Algorithm
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_control
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_PressureControl_Loop
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEEP_control
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowTrigger
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowSensorInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateStop
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateStandBy
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBreath
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InspiratoyHold
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpiratoryHold
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ventilator_Test
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_check
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Safety_Valve_check
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pre_Sensor_check
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O2_Sensor_check
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normal_state
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flow_Sensor_check
</UL>

<P><STRONG><a name="[a1]"></a>DIO_Init</STRONG> (Thumb, 626 bytes, Stack size 8 bytes, systeminit_handler.o(i.DIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Millis
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[a2]"></a>Delay_Millis</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, systeminit_handler.o(i.Delay_Millis))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Communication
</UL>

<P><STRONG><a name="[a3]"></a>ExhFlowSensor</STRONG> (Thumb, 508 bytes, Stack size 72 bytes, exhflowsensor.o(i.ExhFlowSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ExhFlowSensor &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite1
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgetc1
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRxBytesAvail1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8CheckUpdate_exh
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateDiagnostic
</UL>

<P><STRONG><a name="[a8]"></a>ExpiratoryHold</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, medical_procedure.o(i.ExpiratoryHold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ExpiratoryHold &rArr; DAC_Output_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;medicalProce
</UL>

<P><STRONG><a name="[a9]"></a>FRAMInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, systeminit_handler.o(i.FRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_variable_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[ab]"></a>FlowControlLoop</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, ventalgorithm_handler.o(i.FlowControlLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = FlowControlLoop &rArr; flow_control &rArr; O2_Flow_calc &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_control
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_PressureControl_Loop
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
</UL>

<P><STRONG><a name="[ae]"></a>FlowSensorInit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, systeminit_handler.o(i.FlowSensorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FlowSensorInit &rArr; DAC_Output_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[af]"></a>FlowSensor_dataAcq</STRONG> (Thumb, 808 bytes, Stack size 72 bytes, sfm4200_flowsensor.o(i.FlowSensor_dataAcq))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = FlowSensor_dataAcq &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfm4200_flow_read
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateStandBy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateDiagnostic
</UL>

<P><STRONG><a name="[b1]"></a>FlowTrigger</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, ventalgorithm_handler.o(i.FlowTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = FlowTrigger &rArr; Air_Flow_calc &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air_Flow_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
</UL>

<P><STRONG><a name="[b2]"></a>Flow_Sensor_check</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, preusecheck.o(i.Flow_Sensor_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Flow_Sensor_check &rArr; flow_control &rArr; O2_Flow_calc &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_control
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preusecheck
</UL>

<P><STRONG><a name="[c4]"></a>Flush_UARTRxBufferArray</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uartstdio.o(i.Flush_UARTRxBufferArray))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Communication
</UL>

<P><STRONG><a name="[b4]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
</UL>

<P><STRONG><a name="[b5]"></a>GPIOPadConfigSet</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
</UL>

<P><STRONG><a name="[e8]"></a>GPIOPinConfigure</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Init
</UL>

<P><STRONG><a name="[ed]"></a>GPIOPinRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinRead))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_conversion
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Technical_Alarm
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Diagnostics
</UL>

<P><STRONG><a name="[b3]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Init
</UL>

<P><STRONG><a name="[9c]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureTrigger
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowTrigger
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ventilator_Test
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normal_state
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_Valve_check
</UL>

<P><STRONG><a name="[139]"></a>Gas_supply</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, preusecheck.o(i.Gas_supply))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preusecheck
</UL>

<P><STRONG><a name="[13b]"></a>I2CMasterBusy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterBusy))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfm4200_flow_read
</UL>

<P><STRONG><a name="[a0]"></a>I2CMasterControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterControl))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfm4200_flow_read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
</UL>

<P><STRONG><a name="[9f]"></a>I2CMasterDataPut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterDataPut))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfm4200_flow_read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
</UL>

<P><STRONG><a name="[13c]"></a>I2CMasterErr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterErr))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfm4200_flow_read
</UL>

<P><STRONG><a name="[9e]"></a>I2CMasterSlaveAddrSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterSlaveAddrSet))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
</UL>

<P><STRONG><a name="[b6]"></a>I2C_Init</STRONG> (Thumb, 664 bytes, Stack size 8 bytes, systeminit_handler.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_Init &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReady
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[b9]"></a>InspiratoyHold</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, medical_procedure.o(i.InspiratoyHold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InspiratoyHold &rArr; DAC_Output_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;medicalProce
</UL>

<P><STRONG><a name="[103]"></a>IntDisable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit2
</UL>

<P><STRONG><a name="[106]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig2
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig1
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit2
</UL>

<P><STRONG><a name="[ba]"></a>IntMasterDisable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushRx1
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushRx
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx2
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushRx2
</UL>

<P><STRONG><a name="[bc]"></a>IntMasterEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Timer
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushRx1
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushRx
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx2
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushRx2
</UL>

<P><STRONG><a name="[f0]"></a>IntRegister</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, interrupt.o(i.IntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntRegister
</UL>

<P><STRONG><a name="[be]"></a>ManualBreath</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, medical_procedure.o(i.ManualBreath))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ManualBreath &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;medicalProce
</UL>

<P><STRONG><a name="[c0]"></a>Modbus_Communication</STRONG> (Thumb, 796 bytes, Stack size 248 bytes, modbuscommn_handler.o(i.Modbus_Communication))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = Modbus_Communication &rArr; Modbus_WriteSingleReg &rArr; unpack_IEEE754 &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Millis
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_WriteSingleReg
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_ReadReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_MultipleReg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgetc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRxBytesAvail
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_UARTRxBufferArray
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>Modbus_MultipleReg</STRONG> (Thumb, 374 bytes, Stack size 120 bytes, modbuscommn_handler.o(i.Modbus_MultipleReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Modbus_MultipleReg &rArr; unpack_IEEE754 &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_IEEE754
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Communication
</UL>

<P><STRONG><a name="[c6]"></a>Modbus_ReadReg</STRONG> (Thumb, 324 bytes, Stack size 184 bytes, modbuscommn_handler.o(i.Modbus_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Modbus_ReadReg &rArr; UARTwrite &rArr; UARTPrimeTransmit &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_IEEE754
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Communication
</UL>

<P><STRONG><a name="[cc]"></a>Modbus_Service_MessageCmd</STRONG> (Thumb, 322 bytes, Stack size 216 bytes, modbuscommn_handler.o(i.Modbus_Service_MessageCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Modbus_Service_MessageCmd &rArr; UARTwrite &rArr; UARTPrimeTransmit &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_IEEE754
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Service_MessageTx
</UL>

<P><STRONG><a name="[ce]"></a>Modbus_Service_MessageTx</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, modbuscommn_handler.o(i.Modbus_Service_MessageTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Modbus_Service_MessageTx &rArr; Modbus_Service_MessageCmd &rArr; UARTwrite &rArr; UARTPrimeTransmit &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Service_MessageCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateDiagnostic
</UL>

<P><STRONG><a name="[c7]"></a>Modbus_WriteSingleReg</STRONG> (Thumb, 370 bytes, Stack size 120 bytes, modbuscommn_handler.o(i.Modbus_WriteSingleReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Modbus_WriteSingleReg &rArr; unpack_IEEE754 &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_IEEE754
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Communication
</UL>

<P><STRONG><a name="[cf]"></a>Normal_state</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, preusecheck.o(i.Normal_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Normal_state &rArr; DAC_Output_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preusecheck
</UL>

<P><STRONG><a name="[d0]"></a>O2_Flow_calc</STRONG> (Thumb, 1000 bytes, Stack size 112 bytes, ventalgorithm_handler.o(i.O2_Flow_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = O2_Flow_calc &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_control
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_PressureControl_Loop
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ventilator_Test
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Safety_Valve_check
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pre_Sensor_check
</UL>

<P><STRONG><a name="[d1]"></a>O2_Sensor_check</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, preusecheck.o(i.O2_Sensor_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = O2_Sensor_check &rArr; flow_control &rArr; O2_Flow_calc &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flow_control
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preusecheck
</UL>

<P><STRONG><a name="[d2]"></a>PEEP_control</STRONG> (Thumb, 692 bytes, Stack size 32 bytes, ventalgorithm_handler.o(i.PEEP_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PEEP_control &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
</UL>

<P><STRONG><a name="[ad]"></a>PID_PressureControl_Loop</STRONG> (Thumb, 490 bytes, Stack size 8 bytes, ventalgorithm_handler.o(i.PID_PressureControl_Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = PID_PressureControl_Loop &rArr; O2_Flow_calc &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O2_Flow_calc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air_Flow_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowControlLoop
</UL>

<P><STRONG><a name="[d5]"></a>PRVC</STRONG> (Thumb, 1192 bytes, Stack size 32 bytes, prvc.o(i.PRVC))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = PRVC &rArr; PressureCtrl_Algorithm &rArr; pressure_autocorr &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolCtrl_Algorithm
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureCtrl_Algorithm
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vent_Algorithm
</UL>

<P><STRONG><a name="[d9]"></a>PV_AlarmGeneration</STRONG> (Thumb, 814 bytes, Stack size 48 bytes, technicalalarm_handler.o(i.PV_AlarmGeneration))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PV_AlarmGeneration &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Technical_Alarm
</UL>

<P><STRONG><a name="[dd]"></a>Pre_Sensor_check</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, preusecheck.o(i.Pre_Sensor_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Pre_Sensor_check &rArr; O2_Flow_calc &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O2_Flow_calc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air_Flow_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preusecheck
</UL>

<P><STRONG><a name="[d8]"></a>PressureCtrl_Algorithm</STRONG> (Thumb, 1268 bytes, Stack size 32 bytes, pressurectrlmode_handler.o(i.PressureCtrl_Algorithm))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = PressureCtrl_Algorithm &rArr; pressure_autocorr &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resis_calculation
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_autocorr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simv
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRVC
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vent_Algorithm
</UL>

<P><STRONG><a name="[e0]"></a>PressureTrigger</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, ventalgorithm_handler.o(i.PressureTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PressureTrigger
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
</UL>

<P><STRONG><a name="[2e]"></a>SSI1_IntHandler</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, ssi_handler.o(i.SSI1_IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSI1_IntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntStatus
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntClear
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPutNonBlocking
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGetNonBlocking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, ssi.o(i.SSIConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Init
</UL>

<P><STRONG><a name="[e2]"></a>SSIDataGetNonBlocking</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssi.o(i.SSIDataGetNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI1_IntHandler
</UL>

<P><STRONG><a name="[e3]"></a>SSIDataPutNonBlocking</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssi.o(i.SSIDataPutNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI1_IntHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Communication
</UL>

<P><STRONG><a name="[e4]"></a>SSIIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssi.o(i.SSIIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI1_IntHandler
</UL>

<P><STRONG><a name="[ea]"></a>SSIIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(i.SSIIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Init
</UL>

<P><STRONG><a name="[e1]"></a>SSIIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI1_IntHandler
</UL>

<P><STRONG><a name="[e5]"></a>SSI_Communication</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, ssi_handler.o(i.SSI_Communication))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SSI_Communication &rArr; unpack_IEEE754 &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_IEEE754
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPutNonBlocking
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateStandBy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateDiagnostic
</UL>

<P><STRONG><a name="[e6]"></a>SSI_Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ssi_handler.o(i.SSI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SSI_Init &rArr; GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntEnable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[eb]"></a>Safety_Valve_check</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, preusecheck.o(i.Safety_Valve_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Safety_Valve_check &rArr; O2_Flow_calc &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O2_Flow_calc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air_Flow_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preusecheck
</UL>

<P><STRONG><a name="[ec]"></a>Self_Diagnostics</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, diagnostics.o(i.Self_Diagnostics))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Self_Diagnostics &rArr; Ventilator_Test &rArr; O2_Flow_calc &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ventilator_Test
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateDiagnostic
</UL>

<P><STRONG><a name="[b8]"></a>SysCtlClockGet</STRONG> (Thumb, 304 bytes, Stack size 12 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Timer
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[e7]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig2
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>

<P><STRONG><a name="[111]"></a>SysCtlPeripheralPresent</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralPresent))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig1
</UL>

<P><STRONG><a name="[b7]"></a>SysCtlPeripheralReady</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralReady))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[f3]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Timer
</UL>

<P><STRONG><a name="[ef]"></a>SysTickIntRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, systick.o(i.SysTickIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTickIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Timer
</UL>

<P><STRONG><a name="[f2]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Timer
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 672 bytes, Stack size 0 bytes, systeminit_handler.o(i.SysTick_Handler))
<BR>[Address Reference Count : 2]<UL><LI> systeminit_handler.o(i.SysTick_Timer)
<LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>SysTick_Timer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, systeminit_handler.o(i.SysTick_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Timer &rArr; SysTickIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntRegister
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[78]"></a>SystemInit</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, system_tm4c123.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(.text)
</UL>
<P><STRONG><a name="[f4]"></a>System_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, systeminit_handler.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = System_Init &rArr; SSI_Init &rArr; GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_channel_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Timer
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowSensorInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>Technical_Alarm</STRONG> (Thumb, 532 bytes, Stack size 16 bytes, technicalalarm_handler.o(i.Technical_Alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Technical_Alarm &rArr; PV_AlarmGeneration &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PV_AlarmGeneration
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateDiagnostic
</UL>

<P><STRONG><a name="[115]"></a>UARTCharGetNonBlocking</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.UARTCharGetNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler1
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler2
</UL>

<P><STRONG><a name="[104]"></a>UARTCharPutNonBlocking</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.UARTCharPutNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit2
</UL>

<P><STRONG><a name="[117]"></a>UARTCharsAvail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTCharsAvail))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler1
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler2
</UL>

<P><STRONG><a name="[f9]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, uart.o(i.UARTConfigSetExpClk))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig2
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig1
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>

<P><STRONG><a name="[10f]"></a>UARTEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(i.UARTEnable))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig2
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>

<P><STRONG><a name="[10c]"></a>UARTFIFOLevelSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.UARTFIFOLevelSet))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig2
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>

<P><STRONG><a name="[fa]"></a>UARTFlushRx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uartstdio.o(i.UARTFlushRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTFlushRx &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>

<P><STRONG><a name="[fb]"></a>UARTFlushRx1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uartstdio1.o(i.UARTFlushRx1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTFlushRx1 &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig1
</UL>

<P><STRONG><a name="[fc]"></a>UARTFlushRx2</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uartstdio2.o(i.UARTFlushRx2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTFlushRx2 &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig2
</UL>

<P><STRONG><a name="[cd]"></a>UARTFlushTx</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uartstdio.o(i.UARTFlushTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTFlushTx &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Service_MessageCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>

<P><STRONG><a name="[fe]"></a>UARTFlushTx1</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uartstdio1.o(i.UARTFlushTx1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTFlushTx1 &rArr; IsBufferEmpty1
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty1
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig1
</UL>

<P><STRONG><a name="[100]"></a>UARTFlushTx2</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uartstdio2.o(i.UARTFlushTx2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTFlushTx2 &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty2
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig2
</UL>

<P><STRONG><a name="[114]"></a>UARTIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.UARTIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler1
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler2
</UL>

<P><STRONG><a name="[10d]"></a>UARTIntDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig2
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler1
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig1
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler2
</UL>

<P><STRONG><a name="[10e]"></a>UARTIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UARTIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig2
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite1
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler1
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig1
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler2
</UL>

<P><STRONG><a name="[113]"></a>UARTIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler1
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler2
</UL>

<P><STRONG><a name="[c2]"></a>UARTRxBytesAvail</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uartstdio.o(i.UARTRxBytesAvail))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UARTRxBytesAvail &rArr; GetBufferCount
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Communication
</UL>

<P><STRONG><a name="[a5]"></a>UARTRxBytesAvail1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uartstdio1.o(i.UARTRxBytesAvail1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UARTRxBytesAvail1 &rArr; GetBufferCount1
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferCount1
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExhFlowSensor
</UL>

<P><STRONG><a name="[105]"></a>UARTSpaceAvail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTSpaceAvail))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit2
</UL>

<P><STRONG><a name="[10b]"></a>UARTStdioConfig</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, uartstdio.o(i.UARTStdioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTStdioConfig &rArr; UARTFlushTx &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntDisable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFOLevelSet
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushRx
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[110]"></a>UARTStdioConfig1</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, uartstdio1.o(i.UARTStdioConfig1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTStdioConfig1 &rArr; UARTFlushTx1 &rArr; IsBufferEmpty1
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralPresent
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushRx1
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntDisable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFOLevelSet
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[112]"></a>UARTStdioConfig2</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, uartstdio2.o(i.UARTStdioConfig2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTStdioConfig2 &rArr; UARTFlushTx2 &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntDisable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFOLevelSet
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx2
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushRx2
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[11]"></a>UARTStdioIntHandler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, uartstdio.o(i.UARTStdioIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTStdioIntHandler &rArr; UARTPrimeTransmit &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntDisable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGetNonBlocking
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferFull
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UARTStdioIntHandler1</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, uartstdio1.o(i.UARTStdioIntHandler1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTStdioIntHandler1 &rArr; UARTPrimeTransmit &rArr; IsBufferEmpty1
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferFull1
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty1
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntDisable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGetNonBlocking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UARTStdioIntHandler2</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, uartstdio2.o(i.UARTStdioIntHandler2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTStdioIntHandler2 &rArr; UARTPrimeTransmit2 &rArr; IsBufferEmpty2
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntDisable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGetNonBlocking
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit2
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferFull2
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>UART_Init</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, systeminit_handler.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Init &rArr; UARTStdioConfig2 &rArr; UARTFlushTx2 &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig2
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[c3]"></a>UARTgetc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uartstdio.o(i.UARTgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTgetc &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Communication
</UL>

<P><STRONG><a name="[a6]"></a>UARTgetc1</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uartstdio1.o(i.UARTgetc1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTgetc1 &rArr; IsBufferEmpty1
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty1
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExhFlowSensor
</UL>

<P><STRONG><a name="[cb]"></a>UARTwrite</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uartstdio.o(i.UARTwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTwrite &rArr; UARTPrimeTransmit &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferFull
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Service_MessageCmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_ReadReg
</UL>

<P><STRONG><a name="[a4]"></a>UARTwrite1</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, uartstdio1.o(i.UARTwrite1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTwrite1 &rArr; UARTPrimeTransmit &rArr; IsBufferEmpty1
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferFull1
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty1
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExhFlowSensor
</UL>

<P><STRONG><a name="[11a]"></a>Valve_check</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, preusecheck.o(i.Valve_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Valve_check &rArr; DAC_Output_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preusecheck
</UL>

<P><STRONG><a name="[11b]"></a>VentAlgorithmSettings</STRONG> (Thumb, 1818 bytes, Stack size 8 bytes, ventalgorithm_handler.o(i.VentAlgorithmSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VentAlgorithmSettings &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
</UL>

<P><STRONG><a name="[11d]"></a>Vent_Algorithm</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ventalgorithm_handler.o(i.Vent_Algorithm))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Vent_Algorithm &rArr; simv &rArr; pressuresupport &rArr; pressure_autocorr &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simv
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preusecheck
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressuresupport
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patient_ckt_chk
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolCtrl_Algorithm
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureCtrl_Algorithm
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRVC
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
</UL>

<P><STRONG><a name="[ee]"></a>Ventilator_Test</STRONG> (Thumb, 534 bytes, Stack size 8 bytes, diagnostics.o(i.Ventilator_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Ventilator_Test &rArr; O2_Flow_calc &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O2_Flow_calc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air_Flow_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Diagnostics
</UL>

<P><STRONG><a name="[d6]"></a>VolCtrl_Algorithm</STRONG> (Thumb, 806 bytes, Stack size 8 bytes, volumectrlmode_handler.o(i.VolCtrl_Algorithm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VolCtrl_Algorithm &rArr; DAC_Output_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simv
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRVC
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vent_Algorithm
</UL>

<P><STRONG><a name="[12d]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[d3]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEEP_control
</UL>

<P><STRONG><a name="[97]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowSensor_dataAcq
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_IEEE754
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_autocorr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O2_Flow_calc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air_Flow_calc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExhFlowSensor
</UL>

<P><STRONG><a name="[12b]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[123]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[122]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[129]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[125]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[12a]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[94]"></a>adc_conversion</STRONG> (Thumb, 1318 bytes, Stack size 40 bytes, adc_handler.o(i.adc_conversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = adc_conversion &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDataGet
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCProcessorTrigger
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntStatus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DataAcq
</UL>

<P><STRONG><a name="[f5]"></a>analog_channel_init</STRONG> (Thumb, 446 bytes, Stack size 8 bytes, adc_handler.o(i.analog_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = analog_channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[132]"></a>comp_calculation</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, ventalgorithm_handler.o(i.comp_calculation))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = comp_calculation &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
</UL>

<P><STRONG><a name="[c5]"></a>crc16</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, crc16.o(i.crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Communication
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_WriteSingleReg
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Service_MessageCmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_ReadReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_MultipleReg
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Communication
</UL>

<P><STRONG><a name="[13d]"></a>crc8CheckUpdateSF05</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, crc.o(i.crc8CheckUpdateSF05))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc8CheckUpdateSF05
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfm4200_flow_read
</UL>

<P><STRONG><a name="[a7]"></a>crc8CheckUpdate_exh</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, exhflowsensor.o(i.crc8CheckUpdate_exh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc8CheckUpdate_exh
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExhFlowSensor
</UL>

<P><STRONG><a name="[127]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[aa]"></a>factory_variable_Read</STRONG> (Thumb, 452 bytes, Stack size 0 bytes, fm3164_memory.o(i.factory_variable_Read))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMInit
</UL>

<P><STRONG><a name="[ac]"></a>flow_control</STRONG> (Thumb, 582 bytes, Stack size 8 bytes, ventalgorithm_handler.o(i.flow_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = flow_control &rArr; O2_Flow_calc &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O2_Flow_calc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air_Flow_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowControlLoop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O2_Sensor_check
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flow_Sensor_check
</UL>

<P><STRONG><a name="[85]"></a>main</STRONG> (Thumb, 384 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = main &rArr; Modbus_Communication &rArr; Modbus_WriteSingleReg &rArr; unpack_IEEE754 &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateStop
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateStandBy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateReset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateDiagnostic
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Communication
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[138]"></a>medicalProce</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, medical_procedure.o(i.medicalProce))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = medicalProce &rArr; ManualBreath &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBreath
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InspiratoyHold
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpiratoryHold
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stateRun
</UL>

<P><STRONG><a name="[ca]"></a>pack_IEEE754</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, modbuscommn_handler.o(i.pack_IEEE754))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pack_IEEE754
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Service_MessageCmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_ReadReg
</UL>

<P><STRONG><a name="[121]"></a>patient_ckt_chk</STRONG> (Thumb, 480 bytes, Stack size 8 bytes, patient_ckt_chk.o(i.patient_ckt_chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = patient_ckt_chk &rArr; DAC_Output_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vent_Algorithm
</UL>

<P><STRONG><a name="[de]"></a>pressure_autocorr</STRONG> (Thumb, 1308 bytes, Stack size 72 bytes, ventalgorithm_handler.o(i.pressure_autocorr))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pressure_autocorr &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressuresupport
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureCtrl_Algorithm
</UL>

<P><STRONG><a name="[11e]"></a>pressuresupport</STRONG> (Thumb, 1256 bytes, Stack size 32 bytes, pressuresupport.o(i.pressuresupport))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = pressuresupport &rArr; pressure_autocorr &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resis_calculation
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_autocorr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vent_Algorithm
</UL>

<P><STRONG><a name="[120]"></a>preusecheck</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, preusecheck.o(i.preusecheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = preusecheck &rArr; O2_Sensor_check &rArr; flow_control &rArr; O2_Flow_calc &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Valve_check
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Safety_Valve_check
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pre_Sensor_check
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O2_Sensor_check
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normal_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gas_supply
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flow_Sensor_check
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_check
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_Valve_check
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vent_Algorithm
</UL>

<P><STRONG><a name="[df]"></a>resis_calculation</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ventalgorithm_handler.o(i.resis_calculation))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressuresupport
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureCtrl_Algorithm
</UL>

<P><STRONG><a name="[b0]"></a>sfm4200_flow_read</STRONG> (Thumb, 450 bytes, Stack size 16 bytes, sfm4200_flowsensor.o(i.sfm4200_flow_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sfm4200_flow_read &rArr; crc8CheckUpdateSF05
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8CheckUpdateSF05
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterErr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowSensor_dataAcq
</UL>

<P><STRONG><a name="[11f]"></a>simv</STRONG> (Thumb, 608 bytes, Stack size 32 bytes, simv.o(i.simv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = simv &rArr; pressuresupport &rArr; pressure_autocorr &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressuresupport
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolCtrl_Algorithm
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureCtrl_Algorithm
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vent_Algorithm
</UL>

<P><STRONG><a name="[126]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[136]"></a>stateDiagnostic</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, scheduler_handler.o(i.stateDiagnostic))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = stateDiagnostic &rArr; Self_Diagnostics &rArr; Ventilator_Test &rArr; O2_Flow_calc &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowSensor_dataAcq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DataAcq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Service_MessageTx
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Technical_Alarm
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_Diagnostics
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Communication
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExhFlowSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>stateReset</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, scheduler_handler.o(i.stateReset))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>stateRun</STRONG> (Thumb, 512 bytes, Stack size 8 bytes, scheduler_handler.o(i.stateRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = stateRun &rArr; Vent_Algorithm &rArr; simv &rArr; pressuresupport &rArr; pressure_autocorr &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowSensor_dataAcq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DataAcq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Service_MessageTx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_calculation
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vent_Algorithm
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VentAlgorithmSettings
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureTrigger
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEEP_control
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowTrigger
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowControlLoop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;medicalProce
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Technical_Alarm
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Communication
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExhFlowSensor
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>stateStandBy</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, scheduler_handler.o(i.stateStandBy))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = stateStandBy &rArr; SSI_Communication &rArr; unpack_IEEE754 &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowSensor_dataAcq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DataAcq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Communication
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>stateStop</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, scheduler_handler.o(i.stateStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stateStop &rArr; DAC_Output_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Output_Set
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>unpack_IEEE754</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, modbuscommn_handler.o(i.unpack_IEEE754))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = unpack_IEEE754 &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_Communication
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_WriteSingleReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_MultipleReg
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[18c]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[18d]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[18e]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[18f]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[190]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowSensor_dataAcq
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_IEEE754
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_conversion
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRVC
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_autocorr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_calculation
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEEP_control
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O2_Flow_calc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air_Flow_calc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PV_AlarmGeneration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExhFlowSensor
</UL>

<P><STRONG><a name="[13f]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowSensor_dataAcq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_autocorr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_calculation
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O2_Flow_calc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air_Flow_calc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PV_AlarmGeneration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExhFlowSensor
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[142]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[145]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[149]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_conversion
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_calculation
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PV_AlarmGeneration
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[147]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_IEEE754
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[191]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_IEEE754
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_conversion
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PV_AlarmGeneration
</UL>

<P><STRONG><a name="[192]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[d4]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEEP_control
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PV_AlarmGeneration
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Technical_Alarm
</UL>

<P><STRONG><a name="[148]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[14c]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowSensor_dataAcq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_conversion
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simv
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressuresupport
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureCtrl_Algorithm
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRVC
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_autocorr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_calculation
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEEP_control
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O2_Flow_calc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air_Flow_calc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PV_AlarmGeneration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExhFlowSensor
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBreath
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[14a]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[141]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[144]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simv
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressuresupport
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureCtrl_Algorithm
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_calculation
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEEP_control
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PV_AlarmGeneration
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Technical_Alarm
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBreath
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[14b]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_conversion
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRVC
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[14d]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[13e]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_autocorr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PV_AlarmGeneration
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[14f]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlowSensor_dataAcq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_conversion
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simv
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressuresupport
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureCtrl_Algorithm
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRVC
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_autocorr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_calculation
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEEP_control
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;O2_Flow_calc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Air_Flow_calc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PV_AlarmGeneration
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Technical_Alarm
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExhFlowSensor
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBreath
</UL>

<P><STRONG><a name="[150]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[151]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[7f]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[193]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[194]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[140]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[146]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[12c]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[152]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[109]"></a>GetBufferCount</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, uartstdio.o(i.GetBufferCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetBufferCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRxBytesAvail
</UL>

<P><STRONG><a name="[fd]"></a>IsBufferEmpty</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uartstdio.o(i.IsBufferEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgetc
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
</UL>

<P><STRONG><a name="[116]"></a>IsBufferFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uartstdio.o(i.IsBufferFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsBufferFull
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
</UL>

<P><STRONG><a name="[102]"></a>UARTPrimeTransmit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uartstdio.o(i.UARTPrimeTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTPrimeTransmit &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSpaceAvail
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPutNonBlocking
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
</UL>

<P><STRONG><a name="[10a]"></a>GetBufferCount1</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, uartstdio1.o(i.GetBufferCount1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetBufferCount1
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRxBytesAvail1
</UL>

<P><STRONG><a name="[ff]"></a>IsBufferEmpty1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uartstdio1.o(i.IsBufferEmpty1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsBufferEmpty1
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite1
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgetc1
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx1
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
</UL>

<P><STRONG><a name="[118]"></a>IsBufferFull1</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uartstdio1.o(i.IsBufferFull1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsBufferFull1
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite1
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler1
</UL>

<P><STRONG><a name="[107]"></a>UARTPrimeTransmit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, uartstdio1.o(i.UARTPrimeTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTPrimeTransmit &rArr; IsBufferEmpty1
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty1
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSpaceAvail
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPutNonBlocking
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite1
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler1
</UL>

<P><STRONG><a name="[101]"></a>IsBufferEmpty2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uartstdio2.o(i.IsBufferEmpty2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsBufferEmpty2
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler2
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit2
</UL>

<P><STRONG><a name="[119]"></a>IsBufferFull2</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uartstdio2.o(i.IsBufferFull2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsBufferFull2
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler2
</UL>

<P><STRONG><a name="[108]"></a>UARTPrimeTransmit2</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, uartstdio2.o(i.UARTPrimeTransmit2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTPrimeTransmit2 &rArr; IsBufferEmpty2
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSpaceAvail
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPutNonBlocking
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty2
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler2
</UL>

<P><STRONG><a name="[14e]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[143]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
